/// Declare the color codes in $color-defs and assign them to abstract
/// variable names in $colors found in _colors.scss which are the colors
/// used in the project.

@use 'sass:map';

// This map is used to define all colors used in this project
$color-defs: (
  // Base colors - keeping these for backward compatibility
  black: var(--color-black),
  white: var(--color-white),
  gray: var(--color-gray),
  gray-light: var(--color-gray-light),
  gray-dark: var(--color-gray-dark),
  blue: var(--color-blue),
  blue-light: var(--color-blue-light),
  blue-semantic: var(--color-blue-semantic),
  red: var(--color-red),
  red-extra-light: var(--color-red-extra-light),
  red-light: var(--color-red-light),
  green: var(--color-green),
  
  // Theme-based color definitions
  theme: (
    primary: (
      main: var(--color-primary-main),
      alt: var(--color-primary-alt),
      text: var(--color-primary-text),
    ),
    action: (
      main: var(--color-action-main),
      alt: var(--color-action-alt),
      text: var(--color-action-text),
    ),
    bg: (
      main: var(--color-bg-main),
      alt: var(--color-bg-alt),
      contrast: var(--color-bg-contrast),
    ),
    text: (
      main: var(--color-text-main),
      alt: var(--color-text-alt),
      inverted: var(--color-text-inverted),
    ),
    link: (
      main: var(--color-link-main),
    ),
    border: (
      main: var(--color-border-main),
      alt: var(--color-border-alt),
    ),
    focus: (
      main: var(--color-focus-main),
    ),
    disabled: (
      bg: var(--color-disabled-bg),
      text: var(--color-disabled-text),
    ),
    overlay: (
      main: var(--color-overlay-main),
    ),
    chart: (
      primary: var(--color-chart-primary),
      secondary: var(--color-chart-secondary),
    ),
  ),
  
  // Semantic colors
  semantic: (
    green: var(--color-semantic-green),
    green-light: var(--color-semantic-green-light),
    green-dark: var(--color-semantic-green-dark),
    red: var(--color-semantic-red),
    red-light: var(--color-semantic-red-light),
    red-dark: var(--color-semantic-red-dark),
    yellow: var(--color-semantic-yellow),
    yellow-light: var(--color-semantic-yellow-light),
    yellow-dark: var(--color-semantic-yellow-dark),
    blue: var(--color-semantic-blue),
    blue-light: var(--color-semantic-blue-light),
    blue-dark: var(--color-semantic-blue-dark),
  ),
  
  // Semantic functional colors
  semantic-func: (
    success: (
      main: var(--color-semantic-success-main),
      alt: var(--color-semantic-success-alt),
      text: var(--color-semantic-success-text),
    ),
    error: (
      main: var(--color-semantic-error-main),
      alt: var(--color-semantic-error-alt),
      text: var(--color-semantic-error-text),
    ),
    warning: (
      main: var(--color-semantic-warning-main),
      alt: var(--color-semantic-warning-alt),
      text: var(--color-semantic-warning-text),
    ),
    info: (
      main: var(--color-semantic-info-main),
      alt: var(--color-semantic-info-alt),
      text: var(--color-semantic-info-text),
    ),
  ),
);

// Function used to get colors from $color-defs
@function color-defs($keys...) {
  $value: map.get($color-defs, $keys...);

  @if not $value {
    @error('Color "#{$keys}" does not exist in $color-defs.');
  }

  @return $value;
}